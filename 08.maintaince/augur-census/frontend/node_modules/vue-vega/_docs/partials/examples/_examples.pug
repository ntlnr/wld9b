+section('Examples')
  +subsection('Reuse Specs')
    :markdown-it
      One of the main features of vega it's an ability to reuse in in
      different environemtns.

      In that case you even no need to create spec yourself but take it from
      some collection

    +example('ReuseSpecsComponentExample')

  +subsection('Data Uri')
    :markdown-it
      In some scenarious you even no need to fetch data manually, for example
      data is already stored in JSON, CSV file, provide url and vega spec would load
      data under the hood

    +example('DataUrlExampleExample')

  +subsection('Spec as prop')
    :markdown-it
      Pass all spec as property

    +example('FullSpecAsPropExample')

  +subsection('Update Data')
    :markdown-it
      Change data and it would propagate changes up tp vega view

    +example('UpdateDataExample')
  +subsection('Update Mark')
    :markdown-it
      Change mark of visualization, yep you can build some dynamic graph builder

    +example('UpdateMarkExample')
  +subsection('Update Encoding')
    :markdown-it
      Update encoding by adding and removing encoding channels

    +example('UpdateEncodingExample')

  +subsection('Layering')
    :markdown-it
      Able to render layering with resolve

    +example('LayeringExample')
  +subsection('Trellis')
    :markdown-it
      Able to render layering with resolve

    +example('TrellisExample')
  +subsection('Event Interactivity')
    :markdown-it
      Allow to subscribe to all native-like events and get information
      about selected datum.


  +example('EventInteractivityExample')
  +subsection('Signal Interactivity')
    :markdown-it
      Allow to subscribe to low-level vega spec signals, not sure on what to doe with
      them. If you need just a data prever 'native-like' events over signals

    +example('SignalInteractivityExample')

